# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `familia` gem.
# Please instead update this file by running `bin/tapioca gem familia`.


# source://familia//lib/familia/core_ext.rb#20
class Array
  include ::Enumerable
end

# source://familia//lib/familia.rb#2
FAMILIA_LIB_HOME = T.let(T.unsafe(nil), String)

# source://familia//lib/familia.rb#8
module Familia
  include ::Gibbler::Object
  include ::Attic::InstanceMethods
  include ::Gibbler::Complex
  extend ::Attic
  include ::Familia::InstanceMethods
  include ::Attic::InstanceMethods
  include ::Gibbler::Complex

  mixes_in_class_methods ::Attic
  mixes_in_class_methods ::Familia::ClassMethods

  class << self
    # source://familia//lib/familia.rb#114
    def apiversion(r = T.unsafe(nil), &blk); end

    # Sets the attribute apiversion
    #
    # @param value the value to set the attribute apiversion to.
    #
    # source://familia//lib/familia.rb#38
    def apiversion=(_arg0); end

    # source://familia//lib/familia.rb#43
    def classes(with_redis_objects = T.unsafe(nil)); end

    # Returns the value of attribute clients.
    #
    # source://familia//lib/familia.rb#36
    def clients; end

    # source://familia//lib/familia.rb#85
    def connect(uri = T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://familia//lib/familia.rb#99
    def connected?(uri = T.unsafe(nil)); end

    # Returns the value of attribute debug.
    #
    # source://familia//lib/familia.rb#37
    def debug; end

    # Sets the attribute debug
    #
    # @param value the value to set the attribute debug to.
    #
    # source://familia//lib/familia.rb#37
    def debug=(_arg0); end

    # @return [Boolean]
    #
    # source://familia//lib/familia.rb#39
    def debug?; end

    # source://familia//lib/familia.rb#103
    def default_suffix(a = T.unsafe(nil)); end

    # source://familia//lib/familia.rb#104
    def default_suffix=(a); end

    # Returns the value of attribute delim.
    #
    # source://familia//lib/familia.rb#37
    def delim; end

    # Sets the attribute delim
    #
    # @param value the value to set the attribute delim to.
    #
    # source://familia//lib/familia.rb#37
    def delim=(_arg0); end

    # Returns the value of attribute dump_method.
    #
    # source://familia//lib/familia.rb#37
    def dump_method; end

    # Sets the attribute dump_method
    #
    # @param value the value to set the attribute dump_method to.
    #
    # source://familia//lib/familia.rb#37
    def dump_method=(_arg0); end

    # source://gibbler/1.0.0/lib/gibbler.rb#320
    def gibbler(*fields); end

    # source://gibbler/1.0.0/lib/gibbler.rb#317
    def gibbler_fields; end

    # @private
    #
    # source://familia//lib/familia.rb#150
    def included(obj); end

    # source://familia//lib/familia.rb#105
    def index(r = T.unsafe(nil)); end

    # source://familia//lib/familia.rb#106
    def index=(r); end

    # source://familia//lib/familia.rb#40
    def info(*msg); end

    # source://gibbler/1.0.0/lib/gibbler.rb#323
    def inherited(obj); end

    # source://familia//lib/familia.rb#107
    def join(*r); end

    # source://familia//lib/familia.rb#46
    def ld(*msg); end

    # Returns the value of attribute load_method.
    #
    # source://familia//lib/familia.rb#37
    def load_method; end

    # Sets the attribute load_method
    #
    # @param value the value to set the attribute load_method to.
    #
    # source://familia//lib/familia.rb#37
    def load_method=(_arg0); end

    # source://familia//lib/familia.rb#79
    def log(level, path); end

    # Returns the value of attribute logger.
    #
    # source://familia//lib/familia.rb#36
    def logger; end

    # source://familia//lib/familia.rb#125
    def now(n = T.unsafe(nil)); end

    # A quantized timestamp
    # e.g. 12:32 -> 12:30
    #
    # source://familia//lib/familia.rb#131
    def qnow(quantum = T.unsafe(nil), now = T.unsafe(nil)); end

    # source://familia//lib/familia.rb#93
    def reconnect_all!; end

    # A convenience method for returning the appropriate Redis
    # connection. If +uri+ is an Integer, we'll treat it as a
    # database number. If it's a String, we'll treat it as a
    # full URI (e.g. redis://1.2.3.4/15).
    # Otherwise we'll return the default connection.
    #
    # source://familia//lib/familia.rb#67
    def redis(uri = T.unsafe(nil)); end

    # source://familia//lib/familia.rb#109
    def rediskey(*args); end

    # Returns the value of attribute secret.
    #
    # source://familia//lib/familia.rb#37
    def secret; end

    # Sets the attribute secret
    #
    # @param value the value to set the attribute secret to.
    #
    # source://familia//lib/familia.rb#37
    def secret=(_arg0); end

    # source://familia//lib/familia.rb#108
    def split(r); end

    # source://familia//lib/familia.rb#49
    def trace(label, redis_client, ident, context = T.unsafe(nil)); end

    # Returns the value of attribute uri.
    #
    # source://familia//lib/familia.rb#36
    def uri; end

    # source://familia//lib/familia.rb#58
    def uri=(v); end
  end
end

# Auto-extended into a class that includes Familia
#
# source://familia//lib/familia/object.rb#7
module Familia::ClassMethods
  # source://familia//lib/familia/object.rb#167
  def all(suffix = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://familia//lib/familia/object.rb#171
  def any?(filter = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#36
  def class_hash(*args, &blk); end

  # source://familia//lib/familia/object.rb#40
  def class_hash?(name); end

  # source://familia//lib/familia/object.rb#44
  def class_hashs; end

  # source://familia//lib/familia/object.rb#36
  def class_list(*args, &blk); end

  # source://familia//lib/familia/object.rb#40
  def class_list?(name); end

  # source://familia//lib/familia/object.rb#44
  def class_lists; end

  # source://familia//lib/familia/object.rb#199
  def class_redis_objects; end

  # @return [Boolean]
  #
  # source://familia//lib/familia/object.rb#203
  def class_redis_objects?(name); end

  # source://familia//lib/familia/object.rb#195
  def class_redis_objects_order; end

  # source://familia//lib/familia/object.rb#36
  def class_set(*args, &blk); end

  # source://familia//lib/familia/object.rb#40
  def class_set?(name); end

  # source://familia//lib/familia/object.rb#44
  def class_sets; end

  # source://familia//lib/familia/object.rb#36
  def class_string(*args, &blk); end

  # source://familia//lib/familia/object.rb#40
  def class_string?(name); end

  # source://familia//lib/familia/object.rb#44
  def class_strings; end

  # source://familia//lib/familia/object.rb#36
  def class_zset(*args, &blk); end

  # source://familia//lib/familia/object.rb#40
  def class_zset?(name); end

  # source://familia//lib/familia/object.rb#44
  def class_zsets; end

  # source://familia//lib/familia/object.rb#217
  def create(*args); end

  # source://familia//lib/familia/object.rb#138
  def db(v = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#142
  def db=(db); end

  # source://familia//lib/familia/object.rb#272
  def destroy!(idx, suffix = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://familia//lib/familia/object.rb#265
  def exists?(idx, suffix = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#289
  def expand(short_idx, suffix = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#64
  def extended(obj); end

  # source://familia//lib/familia/object.rb#277
  def find(suffix = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#160
  def flushdb; end

  # Note +idx+ needs to be an appropriate index for
  # the given class. If the index is multi-value it
  # must be passed as an Array in the proper order.
  # Does not call save.
  #
  # source://familia//lib/familia/object.rb#247
  def from_index(idx); end

  # @raise [ArgumentError]
  #
  # source://familia//lib/familia/object.rb#252
  def from_key(objkey); end

  # source://familia//lib/familia/object.rb#258
  def from_redis(idx, suffix = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#129
  def from_redisdump(dump); end

  # source://familia//lib/familia/object.rb#16
  def hash(*args, &blk); end

  # source://familia//lib/familia/object.rb#21
  def hash?(name); end

  # source://familia//lib/familia/object.rb#25
  def hashs; end

  # source://familia//lib/familia/object.rb#143
  def host(host = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#144
  def host=(host); end

  # TODO: grab db, ttl, uri from parent
  # def parent=(a) @parent = a end
  # def parent(a=nil) @parent = a if a; @parent end
  #
  # source://familia//lib/familia/object.rb#187
  def index(i = T.unsafe(nil), &blk); end

  # source://familia//lib/familia/object.rb#55
  def inherited(obj); end

  # Creates a class method called +name+ that
  # returns an instance of the RedisObject +klass+
  #
  # @raise [ArgumentError]
  #
  # source://familia//lib/familia/object.rb#103
  def install_class_redis_object(name, klass, opts); end

  # Creates an instance method called +name+ that
  # returns an instance of the RedisObject +klass+
  #
  # @raise [ArgumentError]
  #
  # source://familia//lib/familia/object.rb#75
  def install_redis_object(name, klass, opts); end

  # source://familia//lib/familia/object.rb#164
  def keys(suffix = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#16
  def list(*args, &blk); end

  # source://familia//lib/familia/object.rb#21
  def list?(name); end

  # source://familia//lib/familia/object.rb#25
  def lists; end

  # Returns an instance based on +idx+ otherwise it
  # creates and saves a new instance base on +idx+.
  # See from_index
  #
  # source://familia//lib/familia/object.rb#237
  def load_or_create(idx); end

  # source://familia//lib/familia/object.rb#223
  def multiget(*ids); end

  # Returns the value of attribute parent.
  #
  # source://familia//lib/familia/object.rb#132
  def parent; end

  # Sets the attribute parent
  #
  # @param value the value to set the attribute parent to.
  #
  # source://familia//lib/familia/object.rb#132
  def parent=(_arg0); end

  # source://familia//lib/familia/object.rb#145
  def port(port = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#146
  def port=(port); end

  # source://familia//lib/familia/object.rb#183
  def prefix(a = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#182
  def prefix=(a); end

  # source://familia//lib/familia/object.rb#94
  def qstamp(quantum = T.unsafe(nil), pattern = T.unsafe(nil), now = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#227
  def rawmultiget(*ids); end

  # source://familia//lib/familia/object.rb#157
  def redis; end

  # @return [Boolean]
  #
  # source://familia//lib/familia/object.rb#206
  def redis_object?(name); end

  # source://familia//lib/familia/object.rb#213
  def redis_objects; end

  # source://familia//lib/familia/object.rb#209
  def redis_objects_order; end

  # idx can be a value or an Array of values used to create the index.
  # We don't enforce a default suffix; that's left up to the instance.
  # A nil +suffix+ will not be included in the key.
  #
  # @raise [RuntimeError]
  #
  # source://familia//lib/familia/object.rb#283
  def rediskey(idx, suffix = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#16
  def set(*args, &blk); end

  # source://familia//lib/familia/object.rb#21
  def set?(name); end

  # source://familia//lib/familia/object.rb#25
  def sets; end

  # source://familia//lib/familia/object.rb#174
  def size(filter = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#16
  def string(*args, &blk); end

  # source://familia//lib/familia/object.rb#21
  def string?(name); end

  # source://familia//lib/familia/object.rb#25
  def strings; end

  # source://familia//lib/familia/object.rb#177
  def suffix(a = T.unsafe(nil), &blk); end

  # source://familia//lib/familia/object.rb#192
  def suffixes; end

  # source://familia//lib/familia/object.rb#133
  def ttl(v = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#137
  def ttl=(v); end

  # source://familia//lib/familia/object.rb#151
  def uri(uri = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#147
  def uri=(uri); end

  # source://familia//lib/familia/object.rb#16
  def zset(*args, &blk); end

  # source://familia//lib/familia/object.rb#21
  def zset?(name); end

  # source://familia//lib/familia/object.rb#25
  def zsets; end
end

# source://familia//lib/familia.rb#165
module Familia::Collector
  # source://familia//lib/familia.rb#170
  def included(obj); end

  # source://familia//lib/familia.rb#166
  def klasses; end
end

# source://familia//lib/familia/redisobject.rb#806
class Familia::HashKey < ::Familia::RedisObject
  # source://familia//lib/familia/redisobject.rb#825
  def [](n); end

  # source://familia//lib/familia/redisobject.rb#817
  def []=(n, v); end

  # source://familia//lib/familia/redisobject.rb#849
  def all; end

  # source://familia//lib/familia/redisobject.rb#849
  def clone; end

  # source://familia//lib/familia/redisobject.rb#875
  def decr(n, by = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#875
  def decrby(n, by = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#875
  def decrement(n, by = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#862
  def del(n); end

  # source://familia//lib/familia/redisobject.rb#862
  def delete(n); end

  # @return [Boolean]
  #
  # source://familia//lib/familia/redisobject.rb#813
  def empty?; end

  # source://familia//lib/familia/redisobject.rb#830
  def fetch(n, default = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#825
  def get(n); end

  # @return [Boolean]
  #
  # source://familia//lib/familia/redisobject.rb#856
  def has_key?(n); end

  # @return [Boolean]
  #
  # source://familia//lib/familia/redisobject.rb#856
  def include?(n); end

  # source://familia//lib/familia/redisobject.rb#869
  def incr(n, by = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#869
  def incrby(n, by = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#869
  def increment(n, by = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#840
  def keys; end

  # source://familia//lib/familia/redisobject.rb#808
  def length; end

  # @return [Boolean]
  #
  # source://familia//lib/familia/redisobject.rb#856
  def member?(n); end

  # @raise [ArgumentError]
  #
  # source://familia//lib/familia/redisobject.rb#881
  def merge!(h = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#817
  def put(n, v); end

  # source://familia//lib/familia/redisobject.rb#862
  def rem(n); end

  # source://familia//lib/familia/redisobject.rb#862
  def remove(n); end

  # source://familia//lib/familia/redisobject.rb#808
  def size; end

  # source://familia//lib/familia/redisobject.rb#817
  def store(n, v); end

  # source://familia//lib/familia/redisobject.rb#849
  def to_hash; end

  # @raise [ArgumentError]
  #
  # source://familia//lib/familia/redisobject.rb#881
  def update(h = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#844
  def values; end

  # source://familia//lib/familia/redisobject.rb#890
  def values_at(*names); end
end

# source://familia//lib/familia/object.rb#306
module Familia::InstanceMethods
  # A default initialize method. This will be replaced
  # if a class defines its own initialize method after
  # including Familia. In that case, the replacement
  # must call initialize_redis_objects.
  #
  # source://familia//lib/familia/object.rb#312
  def initialize(*args); end

  # def rediskeys
  #  self.class.redis_objects.each do |redis_object_definition|
  #
  #  end
  # end
  #
  # source://familia//lib/familia/object.rb#370
  def allkeys; end

  # source://familia//lib/familia/object.rb#427
  def destroy!; end

  # @return [Boolean]
  #
  # source://familia//lib/familia/object.rb#360
  def exists?; end

  # source://familia//lib/familia/object.rb#492
  def expire(ttl = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#343
  def from_redis; end

  # source://familia//lib/familia/object.rb#435
  def index; end

  # source://familia//lib/familia/object.rb#464
  def index=(v); end

  # This needs to be called in the initialize method of
  # any class that includes Familia.
  #
  # source://familia//lib/familia/object.rb#319
  def initialize_redis_objects; end

  # source://familia//lib/familia/object.rb#392
  def object_proxy; end

  # source://familia//lib/familia/object.rb#339
  def qstamp(quantum = T.unsafe(nil), pattern = T.unsafe(nil), now = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#505
  def raw(suffix = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#496
  def realttl; end

  # source://familia//lib/familia/object.rb#347
  def redis; end

  # source://familia//lib/familia/object.rb#351
  def redisinfo; end

  # +suffix+ is the value to be used at the end of the redis key
  # + ignored+ is literally ignored. It's around to maintain
  # consistency with the class version of this method.
  # (RedisObject#rediskey may call against a class or instance).
  #
  # @raise [Familia::NoIndex]
  #
  # source://familia//lib/familia/object.rb#382
  def rediskey(suffix = T.unsafe(nil), ignored = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#515
  def redistype(suffix = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#509
  def redisuri(suffix = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#396
  def save(meth = T.unsafe(nil)); end

  # source://familia//lib/familia/object.rb#408
  def savenx; end

  # Finds the shortest available unique key (lower limit of 6)
  #
  # source://familia//lib/familia/object.rb#519
  def shortid; end

  # source://familia//lib/familia/object.rb#502
  def ttl; end

  # source://familia//lib/familia/object.rb#499
  def ttl=(v); end

  # source://familia//lib/familia/object.rb#411
  def update!(hsh = T.unsafe(nil)); end
end

# source://familia//lib/familia/redisobject.rb#342
class Familia::List < ::Familia::RedisObject
  # source://familia//lib/familia/redisobject.rb#361
  def <<(v); end

  # source://familia//lib/familia/redisobject.rb#382
  def [](idx, count = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#361
  def add(v); end

  # source://familia//lib/familia/redisobject.rb#413
  def all(count = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#462
  def at(idx); end

  # source://familia//lib/familia/redisobject.rb#446
  def collect(&blk); end

  # source://familia//lib/familia/redisobject.rb#454
  def collectraw(&blk); end

  # source://familia//lib/familia/redisobject.rb#397
  def del(v, count = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#397
  def delete(v, count = T.unsafe(nil)); end

  # def revmembers count=1  #TODO
  #  range -count, 0
  # end
  #
  # source://familia//lib/familia/redisobject.rb#430
  def each(&blk); end

  # source://familia//lib/familia/redisobject.rb#434
  def each_with_index(&blk); end

  # source://familia//lib/familia/redisobject.rb#438
  def eachraw(&blk); end

  # source://familia//lib/familia/redisobject.rb#442
  def eachraw_with_index(&blk); end

  # @return [Boolean]
  #
  # source://familia//lib/familia/redisobject.rb#349
  def empty?; end

  # source://familia//lib/familia/redisobject.rb#466
  def first; end

  # source://familia//lib/familia/redisobject.rb#470
  def last; end

  # source://familia//lib/familia/redisobject.rb#344
  def length; end

  # source://familia//lib/familia/redisobject.rb#413
  def members(count = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#421
  def membersraw(count = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#374
  def pop; end

  # source://familia//lib/familia/redisobject.rb#353
  def push(*values); end

  # source://familia//lib/familia/redisobject.rb#404
  def range(sidx = T.unsafe(nil), eidx = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#409
  def rangeraw(sidx = T.unsafe(nil), eidx = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#397
  def rem(v, count = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#397
  def remove(v, count = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#450
  def select(&blk); end

  # source://familia//lib/familia/redisobject.rb#458
  def selectraw(&blk); end

  # source://familia//lib/familia/redisobject.rb#378
  def shift; end

  # source://familia//lib/familia/redisobject.rb#344
  def size; end

  # source://familia//lib/familia/redisobject.rb#382
  def slice(idx, count = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#413
  def to_a(count = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#366
  def unshift(*values); end
end

# source://familia//lib/familia.rb#138
class Familia::NoIndex < ::Familia::Problem; end

# source://familia//lib/familia.rb#139
class Familia::NonUniqueKey < ::Familia::Problem; end

# source://familia//lib/familia.rb#140
class Familia::NotConnected < ::Familia::Problem
  # @return [NotConnected] a new instance of NotConnected
  #
  # source://familia//lib/familia.rb#142
  def initialize(uri); end

  # source://familia//lib/familia.rb#145
  def message; end

  # Returns the value of attribute uri.
  #
  # source://familia//lib/familia.rb#141
  def uri; end
end

# source://familia//lib/familia.rb#137
class Familia::Problem < ::RuntimeError; end

# source://familia//lib/familia/redisobject.rb#4
class Familia::RedisObject
  # +name+: If parent is set, this will be used as the suffix
  # for rediskey. Otherwise this becomes the value of the key.
  # If this is an Array, the elements will be joined.
  #
  # Options:
  #
  # :class => A class that responds to Familia.load_method and
  # Familia.dump_method. These will be used when loading and
  # saving data from/to redis to unmarshal/marshal the class.
  #
  # :reference => When true the index of the given value will be
  # stored rather than the marshaled value. This assumes that
  # the marshaled object is stored at a separate key. When read,
  # from_redis looks for that separate key and returns the
  # unmarshaled object. :class must be specified. Default: false.
  #
  # :extend => Extend this instance with the functionality in an
  # other module. Literally: "self.extend opts[:extend]".
  #
  # :parent => The Familia object that this redis object belongs
  # to. This can be a class that includes Familia or an instance.
  #
  # :ttl => the time to live in seconds. When not nil, this will
  # set the redis expire for this key whenever #save is called.
  # You can also call it explicitly via #update_expiration.
  #
  # :quantize => append a quantized timestamp to the rediskey.
  # Takes one of the following:
  #   Boolean: include the default stamp (now % 10 minutes)
  #   Integer: the number of seconds to quantize to (e.g. 1.hour)
  #   Array: All arguments for qstamp (quantum, pattern, Time.now)
  #
  # :default => the default value (String-only)
  #
  # :dump_method => the instance method to call to serialize the
  # object before sending it to Redis (default: Familia.dump_method).
  #
  # :load_method => the class method to call to deserialize the
  # object after it's read from Redis (default: Familia.load_method).
  #
  # :db => the redis database to use (ignored if :redis is used).
  #
  # :redis => an instance of Redis.
  #
  # Uses the redis connection of the parent or the value of
  # opts[:redis] or Familia.redis (in that order).
  #
  # @return [RedisObject] a new instance of RedisObject
  #
  # source://familia//lib/familia/redisobject.rb#104
  def initialize(name, opts = T.unsafe(nil)); end

  # RedisObject instances are frozen. `cache` is a hash
  # for you to store values retreived from Redis. This is
  # not used anywhere by default, but you're encouraged
  # to use it in your specific scenarios.
  #
  # source://familia//lib/familia/redisobject.rb#56
  def cache; end

  # @return [Boolean]
  #
  # source://familia//lib/familia/redisobject.rb#183
  def class?; end

  # source://familia//lib/familia/redisobject.rb#221
  def clear; end

  # source://familia//lib/familia/redisobject.rb#117
  def clear_cache; end

  # Returns the most likely value for db, checking (in this order):
  #   * the value from :class if it's a Familia object
  #   * the value from :parent
  #   * the value self.class.db
  #   * assumes the db is 0
  #
  # After this is called once, this method will always return the
  # same value.
  #
  # source://familia//lib/familia/redisobject.rb#138
  def db; end

  # source://familia//lib/familia/redisobject.rb#221
  def del; end

  # source://familia//lib/familia/redisobject.rb#221
  def delete; end

  # source://familia//lib/familia/redisobject.rb#252
  def dump_method; end

  # source://familia//lib/familia/redisobject.rb#121
  def echo(meth, trace); end

  # def destroy!
  #  clear
  #  # TODO: delete redis objects for this instance
  # end
  #
  # @return [Boolean]
  #
  # source://familia//lib/familia/redisobject.rb#232
  def exists?; end

  # source://familia//lib/familia/redisobject.rb#240
  def expire(sec); end

  # source://familia//lib/familia/redisobject.rb#244
  def expireat(unixtime); end

  # source://familia//lib/familia/redisobject.rb#332
  def from_redis(v); end

  # source://familia//lib/familia/redisobject.rb#256
  def load_method; end

  # source://familia//lib/familia/redisobject.rb#205
  def move(db); end

  # source://familia//lib/familia/redisobject.rb#291
  def multi_from_redis(*values); end

  # Returns the value of attribute name.
  #
  # source://familia//lib/familia/redisobject.rb#49
  def name; end

  # Returns the value of attribute parent.
  #
  # source://familia//lib/familia/redisobject.rb#49
  def parent; end

  # @return [Boolean]
  #
  # source://familia//lib/familia/redisobject.rb#187
  def parent?; end

  # source://familia//lib/familia/redisobject.rb#248
  def persist; end

  # source://familia//lib/familia/redisobject.rb#191
  def qstamp(quantum = T.unsafe(nil), pattern = T.unsafe(nil), now = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#236
  def realttl; end

  # source://familia//lib/familia/redisobject.rb#125
  def redis; end

  # Sets the attribute redis
  #
  # @param value the value to set the attribute redis to.
  #
  # source://familia//lib/familia/redisobject.rb#50
  def redis=(_arg0); end

  # returns a redis key based on the parent
  # object so it will include the proper index.
  #
  # source://familia//lib/familia/redisobject.rb#160
  def rediskey; end

  # source://familia//lib/familia/redisobject.rb#209
  def rename(newkey); end

  # source://familia//lib/familia/redisobject.rb#213
  def renamenx(newkey); end

  # source://familia//lib/familia/redisobject.rb#260
  def to_redis(v); end

  # source://familia//lib/familia/redisobject.rb#151
  def ttl; end

  # source://familia//lib/familia/redisobject.rb#217
  def type; end

  # source://familia//lib/familia/redisobject.rb#198
  def update_expiration(ttl = T.unsafe(nil)); end

  class << self
    # source://familia//lib/familia/redisobject.rb#19
    def classes; end

    # Sets the attribute classes
    #
    # @param value the value to set the attribute classes to.
    #
    # source://familia//lib/familia/redisobject.rb#26
    def classes=(_arg0); end

    # source://familia//lib/familia/redisobject.rb#31
    def db(v = T.unsafe(nil)); end

    # Sets the attribute db
    #
    # @param value the value to set the attribute db to.
    #
    # source://familia//lib/familia/redisobject.rb#26
    def db=(_arg0); end

    # @private
    #
    # source://familia//lib/familia/redisobject.rb#39
    def inherited(obj); end

    # Returns the value of attribute parent.
    #
    # source://familia//lib/familia/redisobject.rb#25
    def parent; end

    # Sets the attribute parent
    #
    # @param value the value to set the attribute parent to.
    #
    # source://familia//lib/familia/redisobject.rb#25
    def parent=(_arg0); end

    # To be called inside every class that inherits RedisObject
    # +meth+ becomes the base for the class and instances methods
    # that are created for the given +klass+ (e.g. Obj.list)
    #
    # source://familia//lib/familia/redisobject.rb#11
    def register(klass, meth); end

    # source://familia//lib/familia/redisobject.rb#15
    def registration; end

    # source://familia//lib/familia/redisobject.rb#27
    def ttl(v = T.unsafe(nil)); end

    # Sets the attribute ttl
    #
    # @param value the value to set the attribute ttl to.
    #
    # source://familia//lib/familia/redisobject.rb#26
    def ttl=(_arg0); end

    # source://familia//lib/familia/redisobject.rb#35
    def uri(v = T.unsafe(nil)); end

    # Sets the attribute uri
    #
    # @param value the value to set the attribute uri to.
    #
    # source://familia//lib/familia/redisobject.rb#26
    def uri=(_arg0); end
  end
end

# source://familia//lib/familia/redisobject.rb#499
class Familia::Set < ::Familia::RedisObject
  # source://familia//lib/familia/redisobject.rb#516
  def <<(v); end

  # source://familia//lib/familia/redisobject.rb#510
  def add(*values); end

  # source://familia//lib/familia/redisobject.rb#520
  def all; end

  # source://familia//lib/familia/redisobject.rb#540
  def collect(&blk); end

  # source://familia//lib/familia/redisobject.rb#556
  def collectraw(&blk); end

  # source://familia//lib/familia/redisobject.rb#569
  def del(v); end

  # source://familia//lib/familia/redisobject.rb#569
  def delete(v); end

  # source://familia//lib/familia/redisobject.rb#532
  def each(&blk); end

  # source://familia//lib/familia/redisobject.rb#536
  def each_with_index(&blk); end

  # source://familia//lib/familia/redisobject.rb#548
  def eachraw(&blk); end

  # source://familia//lib/familia/redisobject.rb#552
  def eachraw_with_index(&blk); end

  # @return [Boolean]
  #
  # source://familia//lib/familia/redisobject.rb#506
  def empty?; end

  # @return [Boolean]
  #
  # source://familia//lib/familia/redisobject.rb#564
  def include?(v); end

  # source://familia//lib/familia/redisobject.rb#576
  def intersection(*setkeys); end

  # source://familia//lib/familia/redisobject.rb#501
  def length; end

  # @return [Boolean]
  #
  # source://familia//lib/familia/redisobject.rb#564
  def member?(v); end

  # source://familia//lib/familia/redisobject.rb#520
  def members; end

  # source://familia//lib/familia/redisobject.rb#528
  def membersraw; end

  # source://familia//lib/familia/redisobject.rb#584
  def move(dstkey, v); end

  # source://familia//lib/familia/redisobject.rb#580
  def pop; end

  # source://familia//lib/familia/redisobject.rb#588
  def random; end

  # source://familia//lib/familia/redisobject.rb#592
  def randomraw; end

  # source://familia//lib/familia/redisobject.rb#569
  def rem(v); end

  # source://familia//lib/familia/redisobject.rb#569
  def remove(v); end

  # source://familia//lib/familia/redisobject.rb#544
  def select(&blk); end

  # source://familia//lib/familia/redisobject.rb#560
  def selectraw(&blk); end

  # source://familia//lib/familia/redisobject.rb#501
  def size; end

  # source://familia//lib/familia/redisobject.rb#520
  def to_a; end
end

# source://familia//lib/familia/redisobject.rb#620
class Familia::SortedSet < ::Familia::RedisObject
  # source://familia//lib/familia/redisobject.rb#644
  def [](v); end

  # NOTE: The argument order is the reverse of #add
  # e.g. obj.metrics[VALUE] = SCORE
  #
  # source://familia//lib/familia/redisobject.rb#633
  def []=(v, score); end

  # NOTE: The argument order is the reverse of #[]=
  #
  # source://familia//lib/familia/redisobject.rb#638
  def add(score, v); end

  # source://familia//lib/familia/redisobject.rb#667
  def all(count = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#789
  def at(idx); end

  # source://familia//lib/familia/redisobject.rb#699
  def collect(&blk); end

  # source://familia//lib/familia/redisobject.rb#715
  def collectraw(&blk); end

  # source://familia//lib/familia/redisobject.rb#776
  def decr(v, by = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#776
  def decrby(v, by = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#776
  def decrement(v, by = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#782
  def del(v); end

  # source://familia//lib/familia/redisobject.rb#782
  def delete(v); end

  # source://familia//lib/familia/redisobject.rb#691
  def each(&blk); end

  # source://familia//lib/familia/redisobject.rb#695
  def each_with_index(&blk); end

  # source://familia//lib/familia/redisobject.rb#707
  def eachraw(&blk); end

  # source://familia//lib/familia/redisobject.rb#711
  def eachraw_with_index(&blk); end

  # @return [Boolean]
  #
  # source://familia//lib/familia/redisobject.rb#627
  def empty?; end

  # Return the first element in the list. Redis: ZRANGE(0)
  #
  # source://familia//lib/familia/redisobject.rb#794
  def first; end

  # @return [Boolean]
  #
  # source://familia//lib/familia/redisobject.rb#650
  def include?(v); end

  # source://familia//lib/familia/redisobject.rb#770
  def incr(v, by = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#770
  def incrby(v, by = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#770
  def increment(v, by = T.unsafe(nil)); end

  # Return the last element in the list. Redis: ZRANGE(-1)
  #
  # source://familia//lib/familia/redisobject.rb#799
  def last; end

  # source://familia//lib/familia/redisobject.rb#622
  def length; end

  # @return [Boolean]
  #
  # source://familia//lib/familia/redisobject.rb#650
  def member?(v); end

  # source://familia//lib/familia/redisobject.rb#667
  def members(count = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#675
  def membersraw(count = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#723
  def range(sidx, eidx, opts = T.unsafe(nil)); end

  # e.g. obj.metrics.rangebyscore (now-12.hours), now, :limit => [0, 10]
  #
  # source://familia//lib/familia/redisobject.rb#751
  def rangebyscore(sscore, escore, opts = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#757
  def rangebyscoreraw(sscore, escore, opts = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#729
  def rangeraw(sidx, eidx, opts = T.unsafe(nil)); end

  # rank of member +v+ when ordered lowest to highest (starts at 0)
  #
  # source://familia//lib/familia/redisobject.rb#656
  def rank(v); end

  # source://familia//lib/familia/redisobject.rb#782
  def rem(v); end

  # source://familia//lib/familia/redisobject.rb#782
  def remove(v); end

  # source://familia//lib/familia/redisobject.rb#762
  def remrangebyrank(srank, erank); end

  # source://familia//lib/familia/redisobject.rb#766
  def remrangebyscore(sscore, escore); end

  # source://familia//lib/familia/redisobject.rb#680
  def revmembers(count = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#686
  def revmembersraw(count = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#740
  def revrange(sidx, eidx, opts = T.unsafe(nil)); end

  # source://familia//lib/familia/redisobject.rb#746
  def revrangeraw(sidx, eidx, opts = T.unsafe(nil)); end

  # rank of member +v+ when ordered highest to lowest (starts at 0)
  #
  # source://familia//lib/familia/redisobject.rb#662
  def revrank(v); end

  # source://familia//lib/familia/redisobject.rb#644
  def score(v); end

  # source://familia//lib/familia/redisobject.rb#703
  def select(&blk); end

  # source://familia//lib/familia/redisobject.rb#719
  def selectraw(&blk); end

  # source://familia//lib/familia/redisobject.rb#622
  def size; end

  # source://familia//lib/familia/redisobject.rb#667
  def to_a(count = T.unsafe(nil), opts = T.unsafe(nil)); end
end

# class Example
#       include Familia
#       field :name
#       include Familia::Stamps
#     end
#
# source://familia//lib/familia/helpers.rb#10
module Familia::Stamps
  class << self
    # @private
    #
    # source://familia//lib/familia/helpers.rb#11
    def included(obj); end
  end
end

# source://familia//lib/familia/helpers.rb#43
module Familia::Status
  class << self
    # @private
    #
    # source://familia//lib/familia/helpers.rb#44
    def included(obj); end
  end
end

# source://familia//lib/familia/redisobject.rb#898
class Familia::String < ::Familia::RedisObject
  # source://familia//lib/familia/redisobject.rb#970
  def <<(v); end

  # source://familia//lib/familia/redisobject.rb#970
  def append(v); end

  # source://familia//lib/familia/redisobject.rb#912
  def content; end

  # source://familia//lib/familia/redisobject.rb#956
  def decr; end

  # source://familia//lib/familia/redisobject.rb#963
  def decrby(int); end

  # source://familia//lib/familia/redisobject.rb#956
  def decrement; end

  # source://familia//lib/familia/redisobject.rb#963
  def decrementby(int); end

  # @return [Boolean]
  #
  # source://familia//lib/familia/redisobject.rb#908
  def empty?; end

  # source://familia//lib/familia/redisobject.rb#912
  def get; end

  # source://familia//lib/familia/redisobject.rb#977
  def getbit(offset); end

  # source://familia//lib/familia/redisobject.rb#987
  def getrange(spoint, epoint); end

  # source://familia//lib/familia/redisobject.rb#997
  def getset(v); end

  # source://familia//lib/familia/redisobject.rb#942
  def incr; end

  # source://familia//lib/familia/redisobject.rb#949
  def incrby(int); end

  # source://familia//lib/familia/redisobject.rb#942
  def increment; end

  # source://familia//lib/familia/redisobject.rb#949
  def incrementby(int); end

  # source://familia//lib/familia/redisobject.rb#900
  def init; end

  # source://familia//lib/familia/redisobject.rb#903
  def length; end

  # @return [Boolean]
  #
  # source://familia//lib/familia/redisobject.rb#1003
  def nil?; end

  # source://familia//lib/familia/redisobject.rb#928
  def replace(v); end

  # source://familia//lib/familia/redisobject.rb#928
  def set(v); end

  # source://familia//lib/familia/redisobject.rb#981
  def setbit(offset, v); end

  # source://familia//lib/familia/redisobject.rb#936
  def setnx(v); end

  # source://familia//lib/familia/redisobject.rb#991
  def setrange(offset, v); end

  # source://familia//lib/familia/redisobject.rb#903
  def size; end

  # source://familia//lib/familia/redisobject.rb#924
  def to_i; end

  # source://familia//lib/familia/redisobject.rb#920
  def to_s; end

  # source://familia//lib/familia/redisobject.rb#912
  def value; end

  # source://familia//lib/familia/redisobject.rb#928
  def value=(v); end
end

# source://familia//lib/familia.rb#9
module Familia::VERSION
  def inspect; end

  class << self
    # source://familia//lib/familia.rb#15
    def load_config; end

    # source://familia//lib/familia.rb#10
    def to_s; end
  end
end

# source://familia//lib/familia/core_ext.rb#10
class Hash
  include ::Enumerable
end

# source://familia//lib/familia/core_ext.rb#117
class Numeric
  include ::Comparable
  include ::Time::Units

  # TODO: Use 1024?
  #
  # source://familia//lib/familia/core_ext.rb#125
  def to_bytes; end

  # source://familia//lib/familia/core_ext.rb#120
  def to_ms; end
end

# Assumes Time::Units and Numeric mixins are available.
#
# source://familia//lib/familia/core_ext.rb#32
class String
  include ::Comparable

  # source://familia//lib/familia/core_ext.rb#33
  def in_seconds; end
end

# source://familia//lib/familia/core_ext.rb#42
class Time
  include ::Comparable
end

# source://familia//lib/familia/core_ext.rb#43
module Time::Units
  # source://familia//lib/familia/core_ext.rb#55
  def day; end

  # source://familia//lib/familia/core_ext.rb#55
  def days; end

  # source://familia//lib/familia/core_ext.rb#54
  def hour; end

  # source://familia//lib/familia/core_ext.rb#54
  def hours; end

  # source://familia//lib/familia/core_ext.rb#61
  def in_days; end

  # source://familia//lib/familia/core_ext.rb#62
  def in_hours; end

  # source://familia//lib/familia/core_ext.rb#65
  def in_microseconds; end

  # source://familia//lib/familia/core_ext.rb#64
  def in_milliseconds; end

  # source://familia//lib/familia/core_ext.rb#63
  def in_minutes; end

  # source://familia//lib/familia/core_ext.rb#71
  def in_seconds(u = T.unsafe(nil)); end

  # source://familia//lib/familia/core_ext.rb#67
  def in_time; end

  # source://familia//lib/familia/core_ext.rb#60
  def in_weeks; end

  # source://familia//lib/familia/core_ext.rb#59
  def in_years; end

  # source://familia//lib/familia/core_ext.rb#50
  def microseconds; end

  # source://familia//lib/familia/core_ext.rb#51
  def milliseconds; end

  # source://familia//lib/familia/core_ext.rb#53
  def minute; end

  # source://familia//lib/familia/core_ext.rb#53
  def minutes; end

  # JRuby doesn't like using instance_methods.select here.
  # It could be a bug or something quirky with Attic
  # (although it works in 1.8 and 1.9). The error:
  #
  #  lib/attic.rb:32:in `select': yield called out of block (LocalJumpError)
  #  lib/stella/mixins/numeric.rb:24
  #
  # Create singular methods, like hour and day.
  # instance_methods.select.each do |plural|
  #   singular = plural.to_s.chop
  #   alias_method singular, plural
  # end
  #
  # source://familia//lib/familia/core_ext.rb#51
  def ms; end

  # source://familia//lib/familia/core_ext.rb#52
  def second; end

  # source://familia//lib/familia/core_ext.rb#52
  def seconds; end

  # source://familia//lib/familia/core_ext.rb#56
  def week; end

  # source://familia//lib/familia/core_ext.rb#56
  def weeks; end

  # source://familia//lib/familia/core_ext.rb#57
  def year; end

  # source://familia//lib/familia/core_ext.rb#57
  def years; end

  # source://familia//lib/familia/core_ext.rb#50
  def μs; end
end

# source://familia//lib/familia/core_ext.rb#48
Time::Units::PER_DAY = T.let(T.unsafe(nil), Float)

# source://familia//lib/familia/core_ext.rb#47
Time::Units::PER_HOUR = T.let(T.unsafe(nil), Float)

# source://familia//lib/familia/core_ext.rb#44
Time::Units::PER_MICROSECOND = T.let(T.unsafe(nil), Float)

# source://familia//lib/familia/core_ext.rb#45
Time::Units::PER_MILLISECOND = T.let(T.unsafe(nil), Float)

# source://familia//lib/familia/core_ext.rb#46
Time::Units::PER_MINUTE = T.let(T.unsafe(nil), Float)

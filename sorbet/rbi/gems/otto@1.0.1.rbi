# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `otto` gem.
# Please instead update this file by running `bin/tapioca gem otto`.


# source://otto//lib/otto.rb#7
class Otto
  # @return [Otto] a new instance of Otto
  #
  # source://otto//lib/otto.rb#30
  def initialize(path = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://otto//lib/otto.rb#76
  def add_static_path(path); end

  # source://otto//lib/otto.rb#87
  def call(env); end

  # source://otto//lib/otto.rb#188
  def determine_locale(env); end

  # @raise [ArgumentError]
  #
  # source://otto//lib/otto.rb#43
  def load(path); end

  # Returns the value of attribute not_found.
  #
  # source://otto//lib/otto.rb#29
  def not_found; end

  # Sets the attribute not_found
  #
  # @param value the value to set the attribute not_found to.
  #
  # source://otto//lib/otto.rb#29
  def not_found=(_arg0); end

  # Returns the value of attribute option.
  #
  # source://otto//lib/otto.rb#28
  def option; end

  # Returns the value of attribute option.
  #
  # source://otto//lib/otto.rb#28
  def options; end

  # Returns the value of attribute route_definitions.
  #
  # source://otto//lib/otto.rb#27
  def route_definitions; end

  # Returns the value of attribute routes.
  #
  # source://otto//lib/otto.rb#27
  def routes; end

  # Returns the value of attribute routes_literal.
  #
  # source://otto//lib/otto.rb#27
  def routes_literal; end

  # Returns the value of attribute routes_static.
  #
  # source://otto//lib/otto.rb#27
  def routes_static; end

  # @return [Boolean]
  #
  # source://otto//lib/otto.rb#72
  def safe_dir?(path); end

  # @return [Boolean]
  #
  # source://otto//lib/otto.rb#66
  def safe_file?(path); end

  # Returns the value of attribute server_error.
  #
  # source://otto//lib/otto.rb#29
  def server_error; end

  # Sets the attribute server_error
  #
  # @param value the value to set the attribute server_error to.
  #
  # source://otto//lib/otto.rb#29
  def server_error=(_arg0); end

  # Returns the value of attribute static_route.
  #
  # source://otto//lib/otto.rb#28
  def static_route; end

  # Return the URI path for the given +route_definition+
  # e.g.
  #
  #     Otto.default.path 'YourClass.somemethod'  #=> /some/path
  #
  # source://otto//lib/otto.rb#168
  def uri(route_definition, params = T.unsafe(nil)); end

  class << self
    # Returns the value of attribute debug.
    #
    # source://otto//lib/otto.rb#325
    def debug; end

    # Sets the attribute debug
    #
    # @param value the value to set the attribute debug to.
    #
    # source://otto//lib/otto.rb#325
    def debug=(_arg0); end

    # source://otto//lib/otto.rb#326
    def default; end

    # @return [Boolean]
    #
    # source://otto//lib/otto.rb#339
    def env?(*guesses); end

    # source://otto//lib/otto.rb#330
    def load(path); end

    # source://otto//lib/otto.rb#333
    def path(definition, params = T.unsafe(nil)); end

    # source://otto//lib/otto.rb#336
    def routes; end
  end
end

# source://otto//lib/otto.rb#9
Otto::LIB_HOME = T.let(T.unsafe(nil), String)

# source://otto//lib/otto.rb#343
module Otto::RequestHelpers
  # source://otto//lib/otto.rb#377
  def absolute_suri(host = T.unsafe(nil)); end

  # See: http://stackoverflow.com/questions/10013812/how-to-prevent-jquery-ajax-from-following-a-redirect-after-a-post
  #
  # @return [Boolean]
  #
  # source://otto//lib/otto.rb#393
  def ajax?; end

  # HTTP_X_FORWARDED_FOR is from the ELB (non-https only)
  # and it can take the form: 74.121.244.2, 10.252.130.147
  # HTTP_X_REAL_IP is from nginx
  # REMOTE_ADDR is from thin
  # There's no way to get the client IP address in HTTPS.
  #
  # source://otto//lib/otto.rb#352
  def client_ipaddress; end

  # source://otto//lib/otto.rb#396
  def cookie(name); end

  # @return [Boolean]
  #
  # source://otto//lib/otto.rb#399
  def cookie?(name); end

  # source://otto//lib/otto.rb#402
  def current_absolute_uri; end

  # source://otto//lib/otto.rb#359
  def current_server; end

  # source://otto//lib/otto.rb#362
  def current_server_name; end

  # source://otto//lib/otto.rb#365
  def http_host; end

  # @return [Boolean]
  #
  # source://otto//lib/otto.rb#381
  def local?; end

  # source://otto//lib/otto.rb#356
  def request_method; end

  # source://otto//lib/otto.rb#368
  def request_path; end

  # source://otto//lib/otto.rb#371
  def request_uri; end

  # source://otto//lib/otto.rb#374
  def root_path; end

  # @return [Boolean]
  #
  # source://otto//lib/otto.rb#387
  def secure?; end

  # source://otto//lib/otto.rb#344
  def user_agent; end
end

# source://otto//lib/otto.rb#407
module Otto::ResponseHelpers
  # source://otto//lib/otto.rb#423
  def delete_cookie(name); end

  # Returns the value of attribute request.
  #
  # source://otto//lib/otto.rb#408
  def request; end

  # Sets the attribute request
  #
  # @param value the value to set the attribute request to.
  #
  # source://otto//lib/otto.rb#408
  def request=(_arg0); end

  # source://otto//lib/otto.rb#412
  def send_cookie(name, value, ttl, secure = T.unsafe(nil)); end

  # source://otto//lib/otto.rb#409
  def send_secure_cookie(name, value, ttl); end
end

# e.g.
#
#      GET   /uri/path      YourApp.method
#      GET   /uri/path2     YourApp#method
#
# source://otto//lib/otto.rb#243
class Otto::Route
  # @return [Route] a new instance of Route
  #
  # source://otto//lib/otto.rb#249
  def initialize(verb, path, definition); end

  # source://otto//lib/otto.rb#267
  def call(env, extra_params = T.unsafe(nil)); end

  # Brazenly borrowed from Sinatra::Base:
  # https://github.com/sinatra/sinatra/blob/v1.2.6/lib/sinatra/base.rb#L1156
  #
  # source://otto//lib/otto.rb#292
  def compile(path); end

  # Returns the value of attribute definition.
  #
  # source://otto//lib/otto.rb#247
  def definition; end

  # Returns the value of attribute keys.
  #
  # source://otto//lib/otto.rb#247
  def keys; end

  # Returns the value of attribute kind.
  #
  # source://otto//lib/otto.rb#247
  def kind; end

  # Returns the value of attribute klass.
  #
  # source://otto//lib/otto.rb#247
  def klass; end

  # Returns the value of attribute method.
  #
  # source://otto//lib/otto.rb#247
  def method; end

  # Returns the value of attribute name.
  #
  # source://otto//lib/otto.rb#247
  def name; end

  # Returns the value of attribute otto.
  #
  # source://otto//lib/otto.rb#248
  def otto; end

  # Sets the attribute otto
  #
  # @param value the value to set the attribute otto to.
  #
  # source://otto//lib/otto.rb#248
  def otto=(_arg0); end

  # Returns the value of attribute path.
  #
  # source://otto//lib/otto.rb#247
  def path; end

  # Returns the value of attribute pattern.
  #
  # source://otto//lib/otto.rb#247
  def pattern; end

  # source://otto//lib/otto.rb#264
  def pattern_regexp; end

  # Returns the value of attribute verb.
  #
  # source://otto//lib/otto.rb#247
  def verb; end
end

# source://otto//lib/otto.rb#244
module Otto::Route::ClassMethods
  # Returns the value of attribute otto.
  #
  # source://otto//lib/otto.rb#245
  def otto; end

  # Sets the attribute otto
  #
  # @param value the value to set the attribute otto to.
  #
  # source://otto//lib/otto.rb#245
  def otto=(_arg0); end
end

# source://otto//lib/otto.rb#206
module Otto::Static
  extend ::Otto::Static

  # Creates a Hash with indifferent access.
  #
  # source://otto//lib/otto.rb#233
  def indifferent_hash; end

  # Enable string or symbol key access to the nested params hash.
  #
  # source://otto//lib/otto.rb#215
  def indifferent_params(params); end

  # source://otto//lib/otto.rb#211
  def not_found; end

  # source://otto//lib/otto.rb#208
  def server_error; end
end

# source://otto//lib/otto.rb#11
module Otto::VERSION
  class << self
    # source://otto//lib/otto.rb#16
    def inspect; end

    # source://otto//lib/otto.rb#19
    def load_config; end

    # source://otto//lib/otto.rb#12
    def to_s; end
  end
end
